#include "PpmEditor.h"


void PpmEditor::init()
{
	FileEditor::init();

	const int DEFAULT_MAX_COLOUR_VALUE = 255;

	this->width = 0;
	this->height = 0;
	this->maxColourValue = DEFAULT_MAX_COLOUR_VALUE;
}

PpmEditor::PpmEditor()
{
	this->init();
}

PpmEditor::PpmEditor(const char * fileName)
{
	this->init();
	this->open(fileName);
}

PpmEditor::PpmEditor(const unsigned int width, const unsigned int height, unsigned int maxColourValue)
{
	this->fill(width, height, maxColourValue);
}

void PpmEditor::read(const char * fileName)
{
	std::ifstream in;
	this->openReadFile(in, fileName);

	if (!in.is_open())
	{
		std::cout << "# Unable to open " << fileName << "." << std::endl;
	}
	else
	{
		this->readHeader(in);

		this->sizeInPixels = this->width * this->height;

		this->red.reserve(this->sizeInPixels);
		this->green.reserve(this->sizeInPixels);
		this->blue.reserve(this->sizeInPixels);

		this->readPixels(in);
	}

	in.close();
}

void PpmEditor::write(const char * fileName)
{
	std::ofstream out;
	this->openWriteFile(out, fileName);

	if (out.is_open())
	{
		this->addFileFormat(out);
		out << "# Generated by TRIPCO\n";
		out << this->width << " " << this->height << "\n";

		out << this->maxColourValue << "\n";

		this->writePixels(out);
	}
	else
	{
		std::cout << "# Unable to open " << fileName << " for changes." << std::endl;
	}

	out.close();
}

void PpmEditor::readHeader(std::ifstream & in)
{
	const int NUMBER_OF_SPECIFICATIONS = 3;
	std::string line;

	std::getline(in, line);
	std::stringstream stream(line);

	std::string format;
	stream >> format;

	if (!this->isValidExtension(format))
	{
		std::cout << "# Unrecognized file format." << std::endl;
		return;
	}

	// Array to hold specifications
	unsigned int specs[NUMBER_OF_SPECIFICATIONS] = {};
	unsigned int i = 0;

	while (true)
	{
		while (!stream.eof())
		{
			stream >> specs[i++];

			if (i == NUMBER_OF_SPECIFICATIONS) { goto END_OF_CYCLE; }
		}

		std::getline(in, line);

		// Loop while it is a comment or an empty line
		while (line[0] == '#' || line.empty())
		{
			std::getline(in, line);
		}

		// Reset stream
		stream.str(std::string());
		stream.clear();
		stream.str(line);
	}

	END_OF_CYCLE:

	// Finally save data
	this->width = specs[0];
	this->height = specs[1];
	this->maxColourValue = specs[2];
}

void PpmEditor::fill(const unsigned int width, const unsigned int height, unsigned int maxColourValue)
{
	this->init();
	this->width = width;
	this->height = height;

	this->numRows = this->height;
	this->numCols = this->width;

	this->sizeInPixels = this->height * this->width;

	// fill red, green and blue with 0
	this->red.resize(sizeInPixels);
	this->green.resize(sizeInPixels);
	this->blue.resize(sizeInPixels);

	this->maxColourValue = maxColourValue;

	// Setting file state to being opened
	this->isOpen = true;
}

unsigned int PpmEditor::getMaxColourValue() const
{
	return this->maxColourValue;
}

unsigned int PpmEditor::getAvgColourValuePerPixel(unsigned int pos) const
{
	try
	{
		const unsigned int NUM_COLOUR_VARIATIONS = 3;

		return ((unsigned int)this->red.at(pos) + (unsigned int)this->green.at(pos) + (unsigned int)this->blue.at(pos)) / NUM_COLOUR_VARIATIONS;
	}
	catch (const std::exception & ex)
	{
		std::cout << ex.what() << std::endl;
	}	
}